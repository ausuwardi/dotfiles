#!/usr/bin/env bash

NOTE_DIR=${NOTE_DIR:-~/Documents/notes}
DAILY_TEMPLATE=$NOTE_DIR/templates/daily.md

cd "$NOTE_DIR"

function get_plan_block () {
  # Based on: https://stackoverflow.com/a/38972737
  local journal_file="$1"
  local unfinished_tasks="$(awk '/^## Plan/{flag=1; next} /^#/{flag=0} flag' $journal_file | grep -E '^- \[ \] .*')"
  echo "$unfinished_tasks"
}

function get_previous_plan () {
  local dateterm="$1"
  for offset in `seq 1 30`; do
    previous_datestr=$(date --date=${term}-${offset}day +%Y-%m-%d)
    if [[ -f journal/$previous_datestr.md ]]; then
      get_plan_block journal/$previous_datestr.md
      return
    fi
  done
}

function daily_template () {
  echo $1
  echo $1 | sed -e 's/./=/g;'
  echo
  echo '## Plan'
  echo
  get_previous_plan $1
  echo
  echo '## Outcomes'
  echo
  echo '## Artifacts'
  echo

}

function create_journal_file () {
  local journal_file="$1"
  local datestr=$2
  if [[ -f "$journal_file" ]]; then
    return
  fi
  daily_template $datestr > $journal_file
}

function open_journal () {
  local term="$1"
  local datestr=$(date --date=$term +%Y-%m-%d)
  if [[ -z $datestr ]]; then
    echo "Could not determine journal date, invalid date term?"
    exit 2
  fi
  local journal_file=journal/$datestr.md
  if [[ ! -f $journal_file ]]; then
    create_journal_file $journal_file $datestr
  fi
  nvim $journal_file
}

function open_note () {
  nvim +'lua require("telescope.builtin").find_file({ search_file="'$1'" })'
}

if [[ ${1:0:2} == "j:" ]]; then
  open_journal "${1:2}"
elif [[ ! -z "$1" ]]; then
  open_note "$1"
else
  nvim +'lua require("telescope.builtin").live_grep()'
fi

exit 0
